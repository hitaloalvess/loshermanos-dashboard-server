generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Role {
    id          String   @id @default(uuid())
    name        String
    description String
    created_at  DateTime @default(now())

    PermissionRole PermissionRole[]
    User           User[]
    @@map("roles")
}

model Permission {
    id          String   @id @default(uuid())
    name        String
    description String
    created_at  DateTime @default(now())

    PermissionRole PermissionRole[]
    @@map("permissions")
}

model PermissionRole {
    id            String     @id @default(uuid())
    id_permission String
    permission    Permission @relation(fields: [id_permission], references: [id])
    id_role       String
    role          Role       @relation(fields: [id_role], references: [id])

    @@map("permissions_roles")
}

model Account {
    id                String   @id @default(uuid())
    name_stablishment String
    created_at        DateTime @default(now())

    User     User[]
    Product  Product[]
    Customer Customer[]
    Sale     Sale[]
    @@map("accounts")
}

model User {
    id         String   @id @default(uuid())
    name       String
    email      String
    username   String   @unique
    password   String
    telefone   String
    created_at DateTime @default(now())
    id_account String
    account    Account  @relation(fields: [id_account], references: [id])
    id_role    String
    role       Role     @relation(fields: [id_role], references: [id])

    UserTokens UserTokens[]
    @@map("users")
}

model UserTokens {
    id            String   @id @default(uuid())
    refresh_token String
    expires_date  DateTime
    created_at    DateTime @default(now())
    id_user       String
    user          User     @relation(fields: [id_user], references: [id])

    @@map("users_token")
}

model Product {
    id          String   @id @default(uuid())
    description String
    price       Decimal  @db.Decimal(6, 2)
    image_name  String
    created_at  DateTime @default(now())
    id_account  String
    account     Account  @relation(fields: [id_account], references: [id])

    @@map("products")
}

model Customer {

    id         String   @id @default(uuid())
    name       String
    cpf        String   @unique
    road       String
    district   String
    number     String
    city       String
    phone      String
    zip_code   String
    created_at DateTime @default(now())
    id_account String
    account    Account  @relation(fields: [id_account], references: [id])

    Sale Sale[]
    @@map("customers")
}

model Sale {
    id          String    @id @default(uuid())
    total       Decimal   @db.Decimal(6, 2)
    value_pay   Decimal   @default(0) @db.Decimal(6, 2)
    descount    Decimal   @db.Decimal(6, 2)
    sale_type   Sale_type @default(PENDING)
    updated_at  DateTime
    created_at  DateTime  @default(now())
    id_account  String
    account     Account   @relation(fields: [id_account], references: [id])
    id_customer String
    customer    Customer  @relation(fields: [id_customer], references: [id])

    @@map("sales")
}

enum Sale_type {
    PENDING
    PAID_OUT
}
